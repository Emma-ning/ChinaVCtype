#Prediction on shareholder types
from sklearn.ensemble import RandomForestClassifier
from sklearn.tree import DecisionTreeClassifier
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import GridSearchCV
from sklearn.metrics import classification_report
from sklearn.svm import SVC
from sklearn.neighbors import KNeighborsClassifier
from sklearn import model_selection
from sklearn.neural_network import MLPClassifier

import xgboost as xgb
xtrain,xtest,ytrain,ytest = train_test_split (feature1.astype('float'),target.astype('int'),test_size=0.2)
ytrain1 = np.argmax(np.array(ytrain),1)
ytest1 = np.argmax(np.array(ytest),1)
clf = DecisionTreeClassifier(random_state = 4)
clf.fit(xtrain,ytrain)
y_score = clf.predict(xtest)
print(classification_report(y_score,ytest))


rf = RandomForestClassifier()
parameters = {'n_estimators':range(40,100,5)}
clf = GridSearchCV(estimator = rf,param_grid = parameters)
clf.fit(feature1,target.astype(int))
print(clf.best_params_)


rf = RandomForestClassifier(n_estimators = 90,max_features = 45,
random_state = 42,oob_score = True)
rf.fit(xtrain,ytrain)
y_score = rf.predict(xtest)
print(classification_report(y_score,ytest))


xgb_model = xgb.XGBClassifier(objective = 'binary:logistic', n_estimators = 60, seed = 40)
xgb_model.fit(xtrain,ytrain) 
pred = xgb_model.predict(xtest)
print(classification_report(pred,ytest))
xgb_model = xgb.XGBClassifier(objective = 'binary:logistic', n_estimators = 60, seed = 40)
xgb_model.fit(X_train,y_train) 
pred = xgb_model.predict(X_test)
print(classification_report(pred,y_test))


model = SVC(C = 25, cache_size = 200, class_weight = None, 
    decision_function_shape = 'ovr', degree = 3, gamma = 1,
    kernel = 'rbf', max_iter = -1, probability=False,
    shrinking = True, tol = 0.001, verbose = False)
model.fit(xtrain,ytrain1)
y_score = model.predict(xtest)
print(classification_report(y_score,ytest1))

kn = KNeighborsClassifier()
parameters = {'n_neighbors':range(10,50,5)}
cln = GridSearchCV(estimator = kn,param_grid = parameters)
cln.fit(feature1,target)


kn = KNeighborsClassifier(n_neighbors = 15)
kn.fit(xtrain,ytrain1)
pred = kn.predict(xtest)
print(classification_report(pred,ytest1))


clf = MLPClassifier().fit(xtrain,ytrain1)
pred = clf.predict(xtest)
print(classification_report(pred,ytest1))

#Prediction on VC types
X_train, X_test, y_train, y_test = train_test_split(feature1.astype('float'), target.astype('int'), test_size = 0.2, random_state = 44)
xgb_model = xgb.XGBClassifier(objective = 'binary:logistic', n_estimators = 60, seed = 40)
xgb_model.fit(X_train,y_train) 
pred = xgb_model.predict(X_test)
print(classification_report(pred,y_test))
